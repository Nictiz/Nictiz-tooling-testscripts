<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:ivy="antlib:org.apache.ivy.ant" basedir=".." name="generateTestScripts" default="clean">
    <!--<property name="project" value="Medication-9-0-7"/>-->
    <property name="outputXisInternal" value="false"/>
    
    <property name="ivy.install.version" value="2.5.0-rc1" />
    <property name="ivy.jar.file" value="${ant.library.dir}/ivy.jar" />
    <property name="ivy.dep.file" value="_ant/ivy.xml" />
    
    <property name="build.dir" value="${basedir}/build" />
    <property name="src.dir" value="${basedir}/src" />
    <property name="lib.dir" value="${basedir}/lib"/>
    <property name="ivy.local.jar.file" value="${lib.dir}/ivy.jar" />
    
    <!-- IVY -->
    
    <target name="check-ivy">
        <condition property="ivy.exists" else="false">
            <or>
                <available file="${ivy.jar.file}" type="file"/>
                <available file="${ivy.local.jar.file}" type="file"/>
            </or>
        </condition>
        <mkdir dir="${lib.dir}"/>
    </target>
    
    <target name="download-ivy" depends="check-ivy" unless="ivy.exists">
        <echo message="installing ivy..."/>
        <get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
            dest="${ivy.local.jar.file}" usetimestamp="true"/>
    </target>
    
    <target name="install-ivy" depends="download-ivy" unless="ivy.exists, ivy.loaded">
        <path id="ivy.lib.path">
            <fileset dir="${lib.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
        <property name="ivy.loaded" value="true" />
    </target>
    
    <!-- SAXON, ANT-CONTRIB -->
    
    <target name="retrieve" depends="check-ivy, install-ivy">
        <ivy:retrieve/>
        <ivy:artifactproperty name="[module].[artifact]" value="lib/[artifact]-[revision].[ext]" />
    </target>
    
    <target name="load" depends="retrieve" unless="ant.contrib.loaded">
        <taskdef resource="net/sf/antcontrib/antlib.xml">
            <classpath>
                <pathelement location="${ant-contrib.ant-contrib}" />
            </classpath>
        </taskdef>
        <property name="ant.contrib.loaded" value="true" />
    </target>
    
    <!-- BUILD XML -->
    
    <target name="check-input">
        <input message="Please input project name." addproperty="project"/><!-- Per definition only asks for input if project property is not set -->
        
        <if>
            <not>
                <available file="${basedir}/${project}" type="dir"/>
            </not>
            <then>
                <fail message="Project directory '${project}' does not exist."/>
            </then>
        </if>
        <if>
            <not>
                <available file="${basedir}/${project}/_components" type="dir"/>
            </not>
            <then>
                <echo message="WARNING: Project components directory '${project}/_components' does not exist."/>
            </then>
        </if>
    </target>
    
    <target name="prepare" depends="check-input">
        <tempfile property="temp.dir" destDir="${java.io.tmpdir}" prefix="generateTestScripts-${project}-"/>
        <mkdir dir="${temp.dir}"/>
        <!--<echo>${temp.dir}</echo>-->
    </target>
    
    <target name="build" depends="load, prepare, check-input">
        <path id="projectdir.path">
            <pathelement path="${basedir}/${project}" />
        </path>
        <pathconvert targetos="unix" property="projectdir.unix" refid="projectdir.path"/>
        
        <fileset id="input" dir="${basedir}/${project}">
            <include name="**/*.xml"/>
            <exclude name="**/_*/"/><!-- Exclude every dir that starts with '_' -->
        </fileset>
        
        <for param="file">
            <path>
                <fileset refid="input"/>
            </path>
            <sequential>
                <local name="expectedResponseFormatList"/>
                <local name="file.basename"/>
                <local name="file.dirname"/>
                <local name="file.reldir"/>
                
                <!-- All variables extracted from xmlproperty should be declared local -->
                <local name="TestScript(nts:scenario)"/>
                
                <basename property="file.basename" file="@{file}"/>
                <dirname property="file.dirname" file="@{file}"/>
                <pathconvert property="file.reldir">
                    <path>
                        <dirset dir="${file.dirname}"/>
                    </path>
                    <map from="${basedir}/${project}" to=""/>
                </pathconvert>
                
                <xmlproperty file="@{file}"/>
                
                <if>
                    <equals arg1="${TestScript(nts:scenario)}" arg2="server"/>
                    <then>
                        <property name="expectedResponseFormatList" value="xml,json"/>
                    </then>
                    <else>
                        <property name="expectedResponseFormatList" value="xml"/>
                    </else>
                </if>
                
                <for list="${expectedResponseFormatList}" param="expectedResponseFormat">
                    <sequential>
                        <local name="file.newname"/>
                        <local name="file.reldirXisInternal"/>
                        <property name="file.newname" value="${file.basename}-@{expectedResponseFormat}.xml"/>
                        
                        <xslt force="true" style="${src.dir}/xslt/generateTestScript.xsl" in="@{file}" out="${temp.dir}/${file.reldir}/${file.newname}">                            
                            <factory name="net.sf.saxon.TransformerFactoryImpl"/>
                            <classpath location="${net.sf.saxon.Saxon-HE}"/>
                            <param name="inputDir" expression="file:/${projectdir.unix}"/>
                            <param name="referenceFolder" expression="_reference"/>
                            <param name="commonComponentFolder" expression="../${src.dir}/common-asserts"/>
                            <param name="projectComponentFolder" expression="_components"/>
                            <param name="expectedResponseFormat" expression="@{expectedResponseFormat}"/>
                        </xslt>
                        <xslt force="true" style="${src.dir}/xslt/stripSetup.xsl" in="${temp.dir}/${file.reldir}/${file.newname}" out="${build.dir}/${project}/${file.reldir}/${file.newname}">                            <factory name="net.sf.saxon.TransformerFactoryImpl"/>
                            <classpath location="${net.sf.saxon.Saxon-HE}"/>
                        </xslt>
                        
                        <if>
                            <and>
                                <equals arg1="${TestScript(nts:scenario)}" arg2="server"/>
                                <equals arg1="${outputXisInternal}" arg2="true"/>
                            </and>
                            <then>
                                <propertyregex property="file.reldirXisInternal" input="${file.reldir}" regexp="XIS-Server" replace="XIS-Server-nictizintern"/>
                                <!--<echo message="${file.reldirXisInternal}"/>-->
                                <copy file="${temp.dir}/${file.reldir}/${file.newname}" tofile="${build.dir}/${project}/${file.reldirXisInternal}/${file.basename}-@{expectedResponseFormat}.xml"/>
                            </then>
                        </if>
                    </sequential>
                </for>
                
            </sequential>
        </for>
    </target>
    
    <target name="clean" depends="build">
        <delete dir="${temp.dir}"/>
    </target>
    
</project>