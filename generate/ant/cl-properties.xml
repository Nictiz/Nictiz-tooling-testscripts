<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." name="CLConfigFileProps">
    <target name="prepare-cl-properties" if="${generate.cl.propertiesfile}">
        <!-- Check required data -->
        <fail unless="fhirVersion"
            message="The 'fhirVersion' property is missing. It must be set in order to build a Conformancelab configuration file."/>
        <fail unless="informationStandard"
            message="The 'informationStandard' property is missing. It must be set in order to build a Conformancelab configuration file."/>
        <fail unless="usecase"
            message="The 'usecase' property is missing. It must be set in order to build a Conformancelab configuration file."/>
        <fail unless="roles"
            message="The 'roles' property is missing. It must be set in order for the tooling to know which folder represents the TestScript for a defined role."/>

        <!-- category, subcategory and role must not be explicitly set, they come from the folder structure. -->
        <!-- variant must not be explicitly set, it comes from the target machinery. -->

        <!-- Somewhat involved approach to create the 'targetDescriptions' input parameter for the XSLT conversion; a
             single string containing a comma-separated list of all target descriptions. -->
        <pathconvert property="cl.target.descriptions.raw" pathsep=",">
            <propertyset>
                <propertyref prefix="target.description."/>
                <mapper type="regexp" from="target\.description\.(.*)"
                    to="\1=${target.description.\1}"/>
            </propertyset>
        </pathconvert>
        <loadresource property="cl.target.descriptions">
            <propertyresource name="target.descriptions.raw"/>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </loadresource>
        
        <!-- Default to empty string -->
        <property name="targets.adminOnly" value=""/>
        
        <!-- Default to empty string -->
        <property name="packages" value=""/>

        <!-- Same approach as above to create the 'packages' input parameter for the XSLT conversion; a single string
             containing 'canonical=version' entries, separated by commas. -->
        <pathconvert property="cl.packages.versions.raw" pathsep=",">
            <propertyset>
                <propertyref prefix="package."/>
                <mapper type="regexp" from="package\.(.*)" to="\1=${package.\1}"/>
            </propertyset>
        </pathconvert>
        <loadresource property="cl.packages.versions">
            <propertyresource name="packages.versions.raw"/>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </loadresource>

    </target>
</project>
