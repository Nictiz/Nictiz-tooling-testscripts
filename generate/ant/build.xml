<?xml version="1.0" encoding="UTF-8"?>
<!-- Common ANT build script for Nictiz NTS projects.
    
    The normal use of this build script is to import it from another ANT build script, where a particular folder
    structure is expected:
    - build.xml            : the file that imports this build script
    - src/                 : the dir containing the source files 
       - common-asserts/   : the common components across all projects
       - Project1/         : a project dir
         - InputFolder1/   : one or more dirs containg NTS files
         - _components/    : the components specific for that project
         - _reference/     : the fixtures for that project
    - build/               : the dir where the output will be placed
    - lib/                 :
       - ant-dependencies/ : where the dependencies for ANT will be placed (you probably want to add this to .gitignore)

    The script will ask you for one of the project dirs inside the "src/" dir. Alternatively, this can be passed in the
    ANT call with the -Dproject= option.
-->
     
<project xmlns:ivy="antlib:org.apache.ivy.ant" basedir="." name="generateTestScripts" default="build">
    <!-- The basedir property is the basedir of the including script. This property sets _our_ basedir. -->
    <dirname property="included.basedir" file="${ant.file.generateTestScripts}/.."/>
    
    <property name="ivy.install.version" value="2.5.0-rc1" />
    <property name="ivy.jar.file" value="${ant.library.dir}/ivy.jar" />
    <property name="ivy.dep.file" value="${included.basedir}/ant/ivy.xml" />
    
    <property name="xslt.dir" value="${included.basedir}/xslt" />
    <property name="build.dir" value="${basedir}/build" />
    <property name="src.dir" value="${basedir}/src" />
    <property name="lib.dir" value="${basedir}/lib/ant-dependencies"/>
    <property name="ivy.local.jar.file" value="${lib.dir}/ivy.jar" />
        
    <!-- IVY -->
    
    <target name="check-ivy">
        <condition property="ivy.exists">
            <or>
                <available file="${ivy.jar.file}" type="file"/>
                <available file="${ivy.local.jar.file}" type="file"/>
            </or>
        </condition>
        <mkdir dir="${lib.dir}"/>
    </target>
    
    <target name="download-ivy" depends="check-ivy" unless="ivy.exists">
        <echo message="installing ivy..."/>
        <get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
            dest="${ivy.local.jar.file}" usetimestamp="true"/>
    </target>
    
    <target name="install-ivy" depends="download-ivy" unless="ivy.exists, ivy.loaded">
        <path id="ivy.lib.path">
            <fileset dir="${lib.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
        <property name="ivy.loaded" value="true" />
    </target>
    
    <!-- SAXON, ANT-CONTRIB -->
    
    <target name="retrieve" depends="check-ivy, install-ivy">
        <ivy:retrieve pattern="${lib.dir}/[type]/[artifact]-[revision].[ext]"/>
        <ivy:artifactproperty name="[module].[artifact]" value="${lib.dir}/[type]/[artifact]-[revision].[ext]" />
        <ivy:artifactproperty name="[artifact].[type]" value="${lib.dir}/[type]/[artifact]-[revision].[ext]" />
    </target>
    
    <target name="load" depends="retrieve" unless="ant.contrib.loaded">
        <taskdef resource="net/sf/antcontrib/antlib.xml">
            <classpath>
                <pathelement location="${ant-contrib.ant-contrib}" />
            </classpath>
        </taskdef>
        <property name="ant.contrib.loaded" value="true" />
    </target>
    
    <!-- BUILD XML -->
    
    <target name="check-input">
        <dirset id="src.contents" dir="${src.dir}">
            <include name="*"/>
            <exclude name="common-asserts"/>
        </dirset>
        <property name="prop.src.contents" refid="src.contents"/>
        <input message="Please input project name (${prop.src.contents})." addproperty="project"/><!-- Per definition only asks for input if project property is not set -->
        
        <if>
            <not>
                <available file="${src.dir}/${project}" type="dir"/>
            </not>
            <then>
                <fail message="Project directory '${project}' does not exist."/>
            </then>
        </if>
        <if>
            <not>
                <available file="${src.dir}/${project}/_components" type="dir"/>
            </not>
            <then>
                <echo message="WARNING: Project components directory '${project}/_components' does not exist."/>
            </then>
        </if>
    </target>
    
    <macrodef name="saxon-transform" description="Custom task to run an XSLT transformation using Saxon (HE)">
        <attribute name="style" description="The path to the stylesheet to use for the transformation"/>
        <attribute name="in" description="The path to the input file"/>
        <attribute name="out" description="The path to the output file"/>
        <element name="parameters" optional="yes" description="Optionally, a group of 'param' elements as understood by the XSLT task"/>

        <sequential>
            <xslt force="true" style="@{style}" in="@{in}" out="@{out}">
                <factory name="net.sf.saxon.TransformerFactoryImpl"/>
                <classpath location="${Saxon-HE.jar}"/>
                <parameters/>
            </xslt>
        </sequential>
    </macrodef>

    <macrodef name="transform-NTS-file" description="Custom task to perform the transformation of an NTS file">
        <attribute name="nts.file" description="The (full) path to the input file."/>
        <attribute name="project.dir" description="The base dir of the project."/>
        <attribute name="output.dir" description="The target dir (not just the base) of the transformed file. The name of the actual file will be determined by this task."/>
        <attribute name="fixtures.file" description="The (temporary) text file to collect the list of fixtures to. See the collect-fixtures macrodef for more information."/>

        <sequential>
            <!-- Get the raw file name without suffix -->
            <local name="nts.file.basename"/>
            <basename property="nts.file.basename" file="@{nts.file}" suffix="xml"/>
           
            <!-- Load the NTS file as an "xmlproperty" file. All variables extracted from xmlproperty should be
                 declared local. -->
            <local name="TestScript(nts:scenario)"/>
            <xmlproperty file="@{nts.file}"/>

            <local name="nts.file.newname"/>
            
            <if>
                <equals arg1="${TestScript(nts:scenario)}" arg2="server"/>
                <then>
                    <for param="expectedResponseFormat" list="xml,json"> <!-- XIS scripts are generated in both XML and JSON flavor -->
                        <sequential>
                            <property name="nts.file.newname" value="${nts.file.basename}-@{expectedResponseFormat}.xml"/>

                            <saxon-transform style="${xslt.dir}/generateTestScript.xsl" in="@{nts.file}" out="@{output.dir}/${nts.file.newname}">
                                <parameters>
                                    <param name="referenceFolder" expression="../_reference"/>
                                    <param name="commonComponentFolder" expression="../../common-asserts"/>
                                    <param name="projectComponentFolder" expression="../_components"/>
                                    <param name="expectedResponseFormat" expression="@{expectedResponseFormat}"/>
                                </parameters>
                            </saxon-transform>
                        </sequential>
                    </for>
                </then>
                <else>
                    <property name="nts.file.newname" value="${nts.file.basename}.xml"/>
                    <saxon-transform style="${xslt.dir}/generateTestScript.xsl" in="@{nts.file}" out="@{output.dir}/${nts.file.newname}">
                        <parameters>
                            <param name="referenceFolder" expression="../_reference"/>
                            <param name="commonComponentFolder" expression="../../common-asserts"/>
                            <param name="projectComponentFolder" expression="../_components"/>
                        </parameters>
                    </saxon-transform>
                </else>
            </if>

            <collect-fixtures testscript.path="@{output.dir}/${nts.file.newname}" fixtures.file="${fixtures.file}"/>
        </sequential>
    </macrodef>
    
    <macrodef name="collect-fixtures" description="Analyze a FHIR TestScript for the fixtures used and store them.">
        <attribute name="testscript.path" description="The FHIR TestScript to analyze."/>
        <attribute name="fixtures.file" description="The file to store the list of fixtures to, formatted as an Ant property file with the property 'fixtures' and as value the list of fixtures separated by a semicolon. If there are already fixtures listed in this file, the new fixtures are appended."/>
        
        <sequential>
            <local name="fixtures"/>
            <property file="@{fixtures.file}"/>
            <saxon-transform style="${xslt.dir}/collectFixtures.xsl" in="@{testscript.path}" out="@{fixtures.file}">
                <parameters>
                    <param name="additional" expression="${fixtures}" if="fixtures"/>
                    <param name="includesDir" expression="../_reference/"/>
                </parameters>
            </saxon-transform>
        </sequential>
    </macrodef>

    <target name="build" depends="load, check-input">
        <!-- Collect the XML files to transform -->
        <fileset id="nts.files" dir="${src.dir}/${project}">
            <include name="*/*.xml"/>
            <exclude name="**/_*/"/><!-- Exclude every dir that starts with '_' -->
        </fileset>
        
        <!-- Create a temporary file to collect all the used fixtures -->
        <tempfile property="fixtures.file" suffix=".txt" createfile="true" deleteonexit="true"/>
        
        <sequential>
            <for param="nts.file">
                <path>
                    <fileset refid="nts.files"/>
                </path>
    
                <sequential>
                    <!-- Get the relative directory of the input file within the base directory -->
                    <local name="nts.file.reldir"/>
                    <local name="nts.file.dir"/>
                    <dirname property="nts.file.dir" file="@{nts.file}"/>
                    <pathconvert property="nts.file.reldir">
                        <path>
                            <dirset dir="${nts.file.dir}"/>
                        </path>
                        <map from="${src.dir}/${project}" to=""/>
                    </pathconvert>
    
                    <!-- Apply the transformation -->
                    <transform-NTS-file 
                        nts.file="@{nts.file}"
                        project.dir="${src.dir}/${project}" 
                        output.dir="${build.dir}/${project}/${nts.file.reldir}" 
                        fixtures.file="${fixtures.file}"/>
                </sequential>
            </for>
            
            <!-- Copy over the collected fixtures -->
            <local name="fixtures"/>
            <property file="${fixtures.file}"/>
            <for param="fixture" list="${fixtures}" delimiter=";">
                <sequential>
                    <copy file="${src.dir}/${project}/_reference/@{fixture}" tofile="${build.dir}/${project}/_reference/@{fixture}"/>
                </sequential>
            </for>
        </sequential>
    </target>
</project>