<?xml version="1.0" encoding="UTF-8"?>
<!-- Common ANT build script for Nictiz NTS projects.
    
    The normal use of this build script is to import it from another ANT build script, where a particular folder
    structure is expected:
    - build.xml            : the file that imports this build script
    - src/                 : the dir containing the source files 
       - common-asserts/   : the common components across all projects
       - Project1/         : a project dir
         - InputFolder1/   : one or more dirs containg NTS files
         - _components/    : the components specific for that project
         - _reference/     : the fixtures for that project
    - build/               : the dir where the output will be placed
    - lib/                 :
       - ant-dependencies/ : where the dependencies for ANT will be placed (you probably want to add this to .gitignore)

    The script will ask you for one of the project dirs inside the "src/" dir. Alternatively, this can be passed in the
    ANT call with the -Dproject= option.
-->
     
<project xmlns:ivy="antlib:org.apache.ivy.ant" basedir="." name="generateTestScripts" default="clean">
    <property name="outputXisInternal" value="false"/>

    <!-- The basedir property is the basedir of the including script. This property sets _our_ basedir. -->
    <dirname property="included.basedir" file="${ant.file.generateTestScripts}/.."/>
    
    <property name="ivy.install.version" value="2.5.0-rc1" />
    <property name="ivy.jar.file" value="${ant.library.dir}/ivy.jar" />
    <property name="ivy.dep.file" value="${included.basedir}/ant/ivy.xml" />
    
    <property name="xslt.dir" value="${included.basedir}/xslt" />
    <property name="build.dir" value="${basedir}/build" />
    <property name="src.dir" value="${basedir}/src" />
    <property name="lib.dir" value="${basedir}/lib/ant-dependencies"/>
    <property name="ivy.local.jar.file" value="${lib.dir}/ivy.jar" />
        
    <!-- IVY -->
    
    <target name="check-ivy">
        <condition property="ivy.exists">
            <or>
                <available file="${ivy.jar.file}" type="file"/>
                <available file="${ivy.local.jar.file}" type="file"/>
            </or>
        </condition>
        <mkdir dir="${lib.dir}"/>
    </target>
    
    <target name="download-ivy" depends="check-ivy" unless="ivy.exists">
        <echo message="installing ivy..."/>
        <get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
            dest="${ivy.local.jar.file}" usetimestamp="true"/>
    </target>
    
    <target name="install-ivy" depends="download-ivy" unless="ivy.exists, ivy.loaded">
        <path id="ivy.lib.path">
            <fileset dir="${lib.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
        <property name="ivy.loaded" value="true" />
    </target>
    
    <!-- SAXON, ANT-CONTRIB -->
    
    <target name="retrieve" depends="check-ivy, install-ivy">
        <ivy:retrieve pattern="${lib.dir}/[type]/[artifact]-[revision].[ext]"/>
        <ivy:artifactproperty name="[module].[artifact]" value="${lib.dir}/[type]/[artifact]-[revision].[ext]" />
        <ivy:artifactproperty name="[artifact].[type]" value="${lib.dir}/[type]/[artifact]-[revision].[ext]" />
    </target>
    
    <target name="load" depends="retrieve" unless="ant.contrib.loaded">
        <taskdef resource="net/sf/antcontrib/antlib.xml">
            <classpath>
                <pathelement location="${ant-contrib.ant-contrib}" />
            </classpath>
        </taskdef>
        <property name="ant.contrib.loaded" value="true" />
    </target>
    
    <!-- BUILD XML -->
    
    <target name="check-input">
        <dirset id="src.contents" dir="${src.dir}">
            <include name="*"/>
            <exclude name="common-asserts"/>
        </dirset>
        <property name="prop.src.contents" refid="src.contents"/>
        <input message="Please input project name (${prop.src.contents})." addproperty="project"/><!-- Per definition only asks for input if project property is not set -->
        
        <if>
            <not>
                <available file="${src.dir}/${project}" type="dir"/>
            </not>
            <then>
                <fail message="Project directory '${project}' does not exist."/>
            </then>
        </if>
        <if>
            <not>
                <available file="${src.dir}/${project}/_components" type="dir"/>
            </not>
            <then>
                <echo message="WARNING: Project components directory '${project}/_components' does not exist."/>
            </then>
        </if>
    </target>
    
    <target name="prepare" depends="check-input">
        <tempfile property="temp.dir" destDir="${java.io.tmpdir}" prefix="generateTestScripts-${project}-"/>
        <mkdir dir="${temp.dir}"/>
    </target>
    
    <!-- Custom task to run an XSLT transformation using Saxon (HE). -->
    <macrodef name="saxon-transform">
        <attribute name="style" description="The path to the stylesheet to use for the transformation"/>
        <attribute name="in" description="The path to the input file"/>
        <attribute name="out" description="The path to the output file"/>
        <element name="parameters" optional="yes" description="Optionally, a group of 'param' elements as understood by the XSLT task"/>

        <sequential>
            <xslt force="true" style="@{style}" in="@{in}" out="@{out}">
                <factory name="net.sf.saxon.TransformerFactoryImpl"/>
                <classpath location="${Saxon-HE.jar}"/>
                <parameters/>
            </xslt>
        </sequential>
    </macrodef>

    <target name="build" depends="load, prepare, check-input">
        <path id="projectdir.path">
            <pathelement path="${src.dir}/${project}" />
        </path>
        <pathconvert targetos="unix" property="projectdir.unix" refid="projectdir.path"/>
        
        <fileset id="input" dir="${src.dir}/${project}">
            <include name="**/*.xml"/>
            <exclude name="**/_*/"/><!-- Exclude every dir that starts with '_' -->
        </fileset>
        
        <for param="file">
            <path>
                <fileset refid="input"/>
            </path>
            <sequential>
                <local name="file.basename"/>
                <local name="file.dirname"/>
                <local name="file.reldir"/>
                
                <!-- All variables extracted from xmlproperty should be declared local -->
                <local name="TestScript(nts:scenario)"/>
                
                <basename property="file.basename" file="@{file}" suffix="xml"/>
                <dirname property="file.dirname" file="@{file}"/>
                <pathconvert property="file.reldir">
                    <path>
                        <dirset dir="${file.dirname}"/>
                    </path>
                    <map from="${src.dir}/${project}" to=""/>
                </pathconvert>
                
                <xmlproperty file="@{file}"/>
                
                <if>
                    <equals arg1="${TestScript(nts:scenario)}" arg2="server"/>
                    <then>
                        <for list="xml,json" param="expectedResponseFormat"> <!-- XIS scripts are generated in both XML and JSON flavor -->
                            <sequential>
                                <local name="file.newname"/>
                                <property name="file.newname" value="${file.basename}-@{expectedResponseFormat}.xml"/>

                                <local name="file.reldirXisInternal"/>
                                
                                <saxon-transform style="${xslt.dir}/generateTestScript.xsl" in="@{file}" out="${temp.dir}/${file.reldir}/${file.newname}">
                                    <parameters>
                                        <param name="inputDir" expression="file:///${projectdir.unix}"/>
                                        <param name="referenceFolder" expression="_reference"/>
                                        <param name="commonComponentFolder" expression="../common-asserts"/>
                                        <param name="projectComponentFolder" expression="_components"/>
                                        <param name="expectedResponseFormat" expression="@{expectedResponseFormat}"/>
                                    </parameters>
                                </saxon-transform>
                                <saxon-transform style="${xslt.dir}/stripSetup.xsl" in="${temp.dir}/${file.reldir}/${file.newname}" out="${build.dir}/${project}/${file.reldir}/${file.newname}"/>
                                
                                <if>
                                    <and>
                                        <equals arg1="${TestScript(nts:scenario)}" arg2="server"/>
                                        <equals arg1="${outputXisInternal}" arg2="true"/>
                                    </and>
                                    <then>
                                        <propertyregex property="file.reldirXisInternal" input="${file.reldir}" regexp="XIS-Server" replace="XIS-Server-nictizintern"/>
                                        <!--<echo message="${file.reldirXisInternal}"/>-->
                                        <copy file="${temp.dir}/${file.reldir}/${file.newname}" tofile="${build.dir}/${project}/${file.reldirXisInternal}/${file.basename}-@{expectedResponseFormat}.xml"/>
                                    </then>
                                </if>
                            </sequential>
                        </for>
                    </then>
                    <else>
                        <saxon-transform style="${xslt.dir}/generateTestScript.xsl" in="@{file}" out="${build.dir}/${project}/${file.reldir}/${file.basename}.xml">
                            <parameters>
                                <param name="inputDir" expression="file:///${projectdir.unix}"/>
                                <param name="referenceFolder" expression="_reference"/>
                                <param name="commonComponentFolder" expression="../common-asserts"/>
                                <param name="projectComponentFolder" expression="_components"/>
                            </parameters>
                        </saxon-transform>
                    </else>
                </if>
                
            </sequential>
        </for>
    </target>
    
    <target name="clean" depends="build">
        <delete dir="${temp.dir}"/>
    </target>
    
</project>