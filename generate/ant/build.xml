<?xml version="1.0" encoding="UTF-8"?>
<!-- Common ANT build script for Nictiz NTS projects.
    
    The normal use of this build script is to import it from another ANT build script.
    
    To run it, the following parameters are expected:
    - input.dir             : The folder where the input files reside. See below for an explanation on folder
                              structures.
    - output.dir            : The folder where the output should be placed. See below for an explanation on folder
                              structures.
    - common-components.dir : The directory where the common components reside.

    Additionally, the following optional parameters may be used:
    - outputLevel: the verbosity level of the script output  

    Projects should be organized using the following folder structure: 
        ProjectDir/
            build.properties: properties  
            InputFolder1/   : folder containing NTS files (may contain nested folders with more NTS files)
            InputFolder2/   : folder containing NTS files (may contain nested folders with more NTS files)
            _components/    : the components specific for that project
            _reference/     : the fixtures for that project
    The input folder structure will be recreated in the output directory, together with the _reference folder.

    === TODO
        
    - lib/                 :
       - ant-dependencies/ : where the dependencies for ANT will be placed (you probably want to add this to .gitignore)

-->

<project xmlns:ivy="antlib:org.apache.ivy.ant" basedir="." name="generateTestScripts" default="build">
    <!-- Make the directories passed as parameters absolute -->
    <property name="input.dir.abs"            location="${input.dir}"/>
    <property name="output.dir.abs"           location="${output.dir}"/>
    <property name="commoncomponents.dir.abs" location="${commoncomponents.dir}"/>
    
    <!-- Set testscripttools.dir if it is not supplied by the including build file. -->
    <dirname property="testscripttools.dir" file="${ant.file.generateTestScripts}/.."/>
    
    <property name="ivy.install.version" value="2.5.0-rc1" />
    <property name="ivy.jar.file" value="${ant.library.dir}/ivy.jar" />
    <property name="ivy.dep.file" value="${testscripttools.dir}/ant/ivy.xml" />
    
    <property name="xslt.dir" value="${testscripttools.dir}/xslt" />
    <property name="lib.dir" value="${basedir}/lib/ant-dependencies"/>
    <property name="ivy.local.jar.file" value="${lib.dir}/ivy.jar" />
        
    <!-- Set the verbosity level of the output. A higher value means more verbose output -->
    <property name="outputLevel" value="1" />
    <script language="javascript"> <!-- Gives a script warning. It is advised to switch to Groovy, haven't figured that one out. -->
        var verboseMode = project.getProperty( "outputLevel" )
        project.getBuildListeners().firstElement().setMessageOutputLevel(verboseMode);
    </script>
    
    <!-- IVY -->
    
    <target name="check-ivy">
        <condition property="ivy.exists">
            <or>
                <available file="${ivy.jar.file}" type="file"/>
                <available file="${ivy.local.jar.file}" type="file"/>
            </or>
        </condition>
        <mkdir dir="${lib.dir}"/>
    </target>
    
    <target name="download-ivy" depends="check-ivy" unless="ivy.exists">
        <echo message="Installing Ivy"/>
        <get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
            dest="${ivy.local.jar.file}" usetimestamp="true"/>
    </target>
    
    <target name="install-ivy" depends="download-ivy" unless="ivy.exists, ivy.loaded">
        <path id="ivy.lib.path">
            <fileset dir="${lib.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
        <property name="ivy.loaded" value="true" />
    </target>
    
    <!-- SAXON, ANT-CONTRIB -->
    
    <target name="retrieve" depends="check-ivy, install-ivy">
        <ivy:retrieve pattern="${lib.dir}/[type]/[artifact]-[revision].[ext]"/>
        <ivy:artifactproperty name="[module].[artifact]" value="${lib.dir}/[type]/[artifact]-[revision].[ext]" />
        <ivy:artifactproperty name="[artifact].[type]" value="${lib.dir}/[type]/[artifact]-[revision].[ext]" />
    </target>
    
    <target name="load" depends="retrieve" unless="ant.contrib.loaded">
        <taskdef resource="net/sf/antcontrib/antlib.xml">
            <classpath>
                <pathelement location="${ant-contrib.ant-contrib}" />
            </classpath>
        </taskdef>
        <property name="ant.contrib.loaded" value="true" />
    </target>
    
    <!-- BUILD XML -->
    
    <target name="check-input">
        <if>
            <not>
                <available file="${input.dir.abs}" type="dir"/>
            </not>
            <then>
                <fail message="Project directory '${input.dir.abs}' does not exist."/>
            </then>
        </if>
    </target>
    
    <macrodef name="saxon-transform" description="Custom task to run an XSLT transformation using Saxon (HE)">
        <attribute name="style" description="The path to the stylesheet to use for the transformation"/>
        <attribute name="in" description="The path to the input file" default="@{style}"/>
        <attribute name="out" description="The path to the output file"/>
        <element name="parameters" optional="yes" description="Optionally, a group of 'param' elements as understood by the XSLT task"/>

        <sequential>
            <xslt force="true" style="@{style}" in="@{in}" out="@{out}">
                <factory name="net.sf.saxon.TransformerFactoryImpl">
                    <attribute name="http://saxon.sf.net/feature/recoveryPolicy" value="2"/>
                </factory>
                <classpath location="${Saxon-HE.jar}"/>
                <parameters/>
            </xslt>
        </sequential>
    </macrodef>

    <macrodef name="transform-NTS-file" description="Custom task to perform the transformation of an NTS file">
        <attribute name="nts.file" description="The (full) path to the input file."/>
        <attribute name="output.dir" description="The target dir (not just the base) of the transformed file. The name of the actual file will be determined by this task."/>
        <attribute name="references.file" description="The (temporary) text file to collect the list of fixtures to. See the collect-fixtures macrodef for more information."/>

        <sequential>
            <!-- Get the raw file name without suffix -->
            <local name="nts.file.basename"/>
            <basename property="nts.file.basename" file="@{nts.file}" suffix="xml"/>
           
            <!-- Load the NTS file as an "xmlproperty" file. All variables extracted from xmlproperty should be
                 declared local. -->
            <local name="TestScript(nts:scenario)"/>
            <xmlproperty file="@{nts.file}"/>
            
            <!-- Calculate the relative path to the reference dir from the NTS file-->
            <local name="nts.file.dir"/>
            <local name="reference.dir.relative"/>
            <local name="reference.dir.relative.normalized"/>
            <dirname property="nts.file.dir" file="@{nts.file}"/>
            <property name="reference.dir.relative" location="${reference.dir}" relative="true" basedir="${nts.file.dir}"/>
            <!-- Convert backslashes to forward slashes if needed -->
            <propertyregex property="reference.dir.relative.normalized" input="${reference.dir.relative}" regexp="[\\]" replace="/" global="true" defaultValue="${reference.dir.relative}"/>
            
            <if>
                <equals arg1="${TestScript(nts:scenario)}" arg2="server"/>
                <then>
                    <for param="expectedResponseFormat" list="xml,json"> <!-- XIS scripts are generated in both XML and JSON flavor -->
                        <sequential>
                            <local name="nts.file.newname"/>
                            <property name="nts.file.newname" value="${nts.file.basename}-@{expectedResponseFormat}.xml"/>

                            <saxon-transform style="${xslt.dir}/generateTestScript.xsl" in="@{nts.file}" out="@{output.dir}/${nts.file.newname}">
                                <parameters>
                                    <param name="referenceBase" expression="${reference.dir.relative.normalized}"/>
                                    <param name="commonComponentFolder" expression="${commoncomponents.dir.abs}"/>
                                    <param name="projectComponentFolder" expression="${components.dir.abs}"/>
                                    <param name="expectedResponseFormat" expression="@{expectedResponseFormat}"/>
                                </parameters>
                            </saxon-transform>
                            
                            <collect-references testscript.path="@{output.dir}/${nts.file.newname}" references.file="@{references.file}" reference.dir.rel="@{reference.dir.rel}"/>
                        </sequential>
                    </for>
                </then>
                <else>
                    <local name="nts.file.newname"/>
                    <property name="nts.file.newname" value="${nts.file.basename}.xml"/>
                    <saxon-transform style="${xslt.dir}/generateTestScript.xsl" in="@{nts.file}" out="@{output.dir}/${nts.file.newname}">
                        <parameters>
                            <param name="referenceBase" expression="${reference.dir.relative.normalized}"/>
                            <param name="commonComponentFolder" expression="${commoncomponents.dir.abs}"/>
                            <param name="projectComponentFolder" expression="${components.dir.abs}"/>
                        </parameters>
                    </saxon-transform>
                    <collect-references testscript.path="@{output.dir}/${nts.file.newname}" references.file="@{references.file}" reference.dir.rel="@{reference.dir.rel}"/>
                </else>
            </if>
        </sequential>
    </macrodef>
    
    <macrodef name="collect-references" description="Analyze a FHIR TestScript for the fixtures and rules used, and store them in a file.">
        <attribute name="testscript.path" description="The FHIR TestScript to analyze."/>
        <attribute name="references.file" description="The file to store the list of references fixtures and rules to, formatted as an Ant property file with the property's 'fixtures' and 'rules', each containing a list of files separated by a semicolon. If there are already fixtures/rules listed in this file, the new ones are appended."/>
        <attribute name="reference.dir.rel" description="The relative path to reference.dir, calculated from nts.file.dir (the location of the input NTS file)."/>
        
        <sequential>
            <!-- Load the already known fixtures and rules from the file -->
            <local name="fixtures"/>
            <local name="rules"/>
            <property file="@{references.file}"/>
            
            <!-- Analyze the TestScript using an external stylesheet, feeding it the known fixtures and rules as 
                 parameters -->
            <saxon-transform style="${xslt.dir}/collectReferences.xsl" in="@{testscript.path}" out="@{references.file}">
                <parameters>
                    <param name="additionalFixtures" expression="${fixtures}" if="fixtures"/>
                    <param name="additionalRules" expression="${rules}" if="rules"/>
                    <param name="includesDir" expression="${reference.dir.rel}"/>
                </parameters>
            </saxon-transform>
        </sequential>
    </macrodef>
    
    <macrodef name="copy-references" description="Copy all the referenced files to the build folder. A check will be done if all referenced files are available.">
        <attribute name="references.file" description="A property file with the fixtures and rules. See the documentation on collect-references for more info."/>
        
        <sequential>
            <!-- Load the list of fixtures and rules that are referenced in the FHIR TestScripts -->
            <local name="fixtures"/>
            <local name="rules"/>
            <property file="@{references.file}"/>
            
            <!-- Check if all declared fixtures exist -->
            <for param="fixture" list="${fixtures}" delimiter=";">
                <sequential>
                    <if>
                        <and>
                            <isset property="@{fixture}"/>
                            <not>
                                <available file="${input.dir.abs}/_reference/@{fixture}"/>
                            </not>
                        </and>
                        <then>
                            <fail message="Fixture '@{fixture}' is referenced but doesn't exist"/>
                        </then>
                    </if>
                </sequential>
            </for>
            
            <!-- Copy over the _reference dir with fixtures and rules -->
            <copy todir="${output.dir.abs}/_reference">
                <fileset dir="${reference.dir}"/>
            </copy>
            
            <!-- Copy all rules from the global scope if they don't exist in the local scope, or fail if they don't
                 exist there as well. -->
            <for param="rule" list="${rules}" delimiter=";">
                <sequential>
                    <if>
                        <and>
                            <isset property="@{rule}"/>
                            <not>
                                <available file="${reference.dir}/@{rule}"/>
                            </not>
                        </and>
                        <then>
                            <if>
                                <available file="${commoncomponents.dir.abs}/_reference/@{rule}"/>
                                <then>
                                    <copy file="${commoncomponents.dir.abs}/_reference/@{rule}" tofile="${reference.dir}/@{rule}"/>
                                </then>
                                <else>
                                    <fail message="Rule '@{rule}' is referenced but doesn't exist in the local or global scope"/>
                                </else>
                            </if>
                        </then>
                    </if>
                </sequential>
            </for>
        </sequential>
    </macrodef>
    
    <macrodef name="generate-loadresources" description="Generate a LoadResources TestScript to load all fixtures to the WildFHIR server.">
        <sequential>
            <!-- TODO: loadscript is now generated withtout the name of the project in it. Is this detrimental? -->
            <property name="loadresources.file" value="${output.dir.abs}/_LoadResources/load-resources-purgecreateupdate-xml.xml"/>
            <dirname property="loadresources.file.dir" file="${loadresources.file}"/>
            <property name="reference.dir.loadresourcesrelative" location="${output.dir.abs}/_reference" relative="true" basedir="${loadresources.file.dir}"/>
            <!-- Convert backslashes to forward slashes if needed -->
            <propertyregex property="reference.dir.loadresourcesrelative.normalized" input="${reference.dir.loadresourcesrelative}" regexp="[\\]" replace="/" global="true" defaultValue="${reference.dir.loadresourcesrelative}"/>
            
            <saxon-transform style="${xslt.dir}/generateLoadResources.xsl" out="${loadresources.file}">
                <parameters>
                    <param name="referenceBase" expression="${reference.dir.loadresourcesrelative.normalized}"/>
                    <param name="referenceDir" expression="${input.dir.abs}/_reference/"/>
                    <param name="project" expression="${project}"/>
                    <param name="loadResourcesExclude" expression="${loadresources.exclude}"/>
                </parameters>
            </saxon-transform>
            
            <!-- Check if output is empty. If yes, delete -->
            <if>
                <length file="${loadresources.file}" when="equal" length="0" />
                <then>
                    <delete dir="${loadresources.file.dir}"/>
                </then>
            </if>
        </sequential>
    </macrodef>
    
    <target name="cleanBuildDir">
        <sequential>
            <echo message="Deleting previous output dir"/>
            <delete dir="${output.dir.abs}"/>
        </sequential>
    </target>
    
    <target name="build" depends="load, check-input, cleanBuildDir">
        <property file="${input.dir.abs}/build.properties"/>
        
        <property name="reference.dir" location="${input.dir.abs}/_reference"/>
        <property name="components.dir.abs" location="${input.dir.abs}/_components"/>
        
        <!-- Set default loadresources.exclude to nothing -->
        <property name="loadresources.exclude" value=""/>
        
        <!-- Collect the XML files to transform -->
        <fileset id="nts.files" dir="${input.dir.abs}">
            <include name="*/**/*.xml"/>
            <exclude name="**/_*/"/><!-- Exclude every dir that starts with '_' -->
        </fileset>
        
        <!-- Create a temporary file to collect all the used fixtures -->
        <tempfile property="references.file" suffix=".txt" createfile="true" deleteonexit="true"/>
        
        <!-- Check if there are files in the fileset. -->
        <condition property="nts.files.available">
            <resourcecount count="0" when="gt">
                <fileset refid="nts.files"/>
            </resourcecount>
        </condition>
        
        <!-- Fail if no input files are found - otherwise the build just fails at copy-references without any warning -->
        <if>
            <equals arg1="${nts.files.available}" arg2="true"/>
            <then>
                <sequential>
                    <echo message="Transforming NTS files"/>
                    <for param="nts.file">
                        <path>
                            <fileset refid="nts.files"/>
                        </path>
                        
                        <sequential>
                            <!-- Get the relative directory of the input file within the base directory -->
                            <local name="nts.file.reldir"/>
                            <local name="nts.file.dir"/>
                            <dirname property="nts.file.dir" file="@{nts.file}"/>
                            <pathconvert property="nts.file.reldir">
                                <path>
                                    <dirset dir="${nts.file.dir}"/>
                                </path>
                                <map from="${input.dir.abs}" to=""/>
                            </pathconvert>
                            
                            <!-- Apply the transformation -->
                            <transform-NTS-file 
                                nts.file="@{nts.file}"
                                output.dir="${output.dir.abs}/${nts.file.reldir}" 
                                references.file="${references.file}"/>
                        </sequential>
                    </for>
                    
                    <!-- Copy over all fixtures and rules -->
                    <echo message="Copying fixtures"/>
                    <copy-references references.file="${references.file}"/>
                    <generate-loadresources/>
                </sequential>
            </then>
            <else>
                <fail message="No input files found in ${input.dir.abs}."/>
            </else>
        </if>
        
    </target>
</project>