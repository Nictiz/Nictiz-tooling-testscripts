<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:ivy="antlib:org.apache.ivy.ant" basedir="." name="generateConformanceLabPropertiesFiles" default="build">
    <!-- DEPENDENCY MANAGEMENT -->
    
    <!-- Set testscripttools.dir if it is not supplied by the including build file. -->
    <dirname property="testscripttools.dir" file="${ant.file.generateConformanceLabPropertiesFiles}/.."/>
    
    <property name="dependency.dir" value="${lib.dir}/ant-dependencies"/>
    <property name="xslt.dir" value="${testscripttools.dir}/xslt" />
    
    <property name="ivy.install.version" value="2.5.0-rc1" />
    <property name="ivy.jar.file" value="${ant.library.dir}/ivy.jar" />
    <property name="ivy.dep.file" value="${testscripttools.dir}/ant/ivy.xml" />
    <property name="ivy.local.jar.file" value="${dependency.dir}/ivy.jar" />
    
    <target name="check-ivy">
        <condition property="ivy.exists">
            <or>
                <available file="${ivy.jar.file}" type="file"/>
                <available file="${ivy.local.jar.file}" type="file"/>
            </or>
        </condition>
        <mkdir dir="${dependency.dir}"/>
    </target>
    
    <target name="download-ivy" depends="check-ivy" unless="ivy.exists">
        <echo message="Installing Ivy"/>
        <get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
            dest="${ivy.local.jar.file}" usetimestamp="true"/>
    </target>
    
    <target name="install-ivy" depends="download-ivy" unless="ivy.loaded">
        <path id="ivy.lib.path">
            <fileset dir="${dependency.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
        <property name="ivy.loaded" value="true" />
    </target>
    
    <target name="retrieve-dependencies" depends="check-ivy, install-ivy">
        <ivy:retrieve pattern="${dependency.dir}/[type]/[artifact]-[revision].[ext]"/>
        <ivy:artifactproperty name="[module].[artifact]" value="${dependency.dir}/[type]/[artifact]-[revision].[ext]" />
        <ivy:artifactproperty name="[artifact].[type]" value="${dependency.dir}/[type]/[artifact]-[revision].[ext]" />
    </target>
    
    <!-- CODE -->
    
    <target name="prepare-parameters">
        <!-- Convert the base dir parameter to a file:// url, and get a list of all directory's and subdirectory's
             within it --> 
        <fail unless="testset.dir"
            message="The 'testset.dir' property for generating ConfmanceLab properties files is missing."/>
        <property name="testset.dir.abs" location="${testset.dir}"/>
        <pathconvert property="testset.dir.url" targetos="unix">
            <path location="${testset.dir.abs}"/>
            <!-- Output needs 3 slashes, i.e. file:///. For win style paths that start with a drive letter, simply prepend
             file:///. For unix style paths that start with a slash, only the part after the slash is taken. -->
            <mapper type="regexp" from="\/?(.*)" to="file:///\1"/>
        </pathconvert>
        
        <!-- Check required data -->
        <fail unless="goal"
            message="The 'goal' property is missing. It must be set in order tp build a ConformanceLab configuration file."/>
        <fail unless="fhir.version"
            message="The 'fhir.version' property is missing. It must be set in order to build a Conformancelab configuration file."/>
        <fail unless="informationStandard"
            message="The 'informationStandard' property is missing. It must be set in order to build a Conformancelab configuration file."/>
        <fail unless="usecase"
            message="The 'usecase' property is missing. It must be set in order to build a Conformancelab configuration file."/>
        <fail unless="roles"
            message="The 'roles' property is missing. It must be set in order for the tooling to know which folder represents the TestScript for a defined role."/>
            
        <!-- category, subcategory and role must not be explicitly set, they come from the folder structure. -->
        <!-- variant must not be explicitly set, it comes from the target machinery. -->

        <!-- Somewhat involved approach to create the 'roleDescriptions' input parameter for the XSLT conversion; a
             single string containing a comma-separated list with '[role]=[description]' pairs. -->
        <pathconvert property="role.descriptions.raw" pathsep=",">
            <propertyset>
                <propertyref prefix="role.description."/>
                <mapper type="regexp" from="role\.description\.(.*)"
                    to="\1=${role.description.\1}"/>
            </propertyset>
        </pathconvert>
        <loadresource property="role.descriptions">
            <propertyresource name="role.descriptions.raw"/>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </loadresource>
        
        <!-- Same approach as above to create the 'roleDescriptions' input parameter for the XSLT conversion; a
             single string containing a comma-separated list of '[target]=[description]' pairs. -->
        <pathconvert property="target.descriptions.raw" pathsep=",">
            <propertyset>
                <propertyref prefix="target.description."/>
                <mapper type="regexp" from="target\.description\.(.*)"
                    to="\1=${target.description.\1}"/>
            </propertyset>
        </pathconvert>
        <loadresource property="target.descriptions">
            <propertyresource name="target.descriptions.raw"/>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </loadresource>
            
        <!-- Default to empty string -->
        <property name="targets.adminOnly" value=""/>
        
        <!-- Default to empty string -->
        <property name="packages" value=""/>
            
        <!-- Same approach as above to create the 'packages' input parameter for the XSLT conversion; a single string
             containing '[canonical]=[version]' pairs, separated by commas. -->
        <pathconvert property="packages.versions.raw" pathsep=",">
            <propertyset>
                <propertyref prefix="package."/>
                <mapper type="regexp" from="package\.(.*)" to="\1=${package.\1}"/>
            </propertyset>
        </pathconvert>
        <loadresource property="packages.versions">
            <propertyresource name="packages.versions.raw"/>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </loadresource>
    </target>
    
    <!-- Default to empty string -->
    <property name="server" value=""/>
    
    <!-- Same approach as above to create the 'roleDescriptions' input parameter for the XSLT conversion; a
             single string containing a comma-separated list of '[target]=[description]' pairs. -->
    <pathconvert property="servers.default.raw" pathsep=",">
        <propertyset>
            <propertyref prefix="server."/>
            <mapper type="regexp" from="server\.(.*)"
                to="\1=${server.\1}"/>
        </propertyset>
    </pathconvert>
    <loadresource property="servers.default">
        <propertyresource name="servers.default.raw"/>
        <filterchain>
            <expandproperties/>
        </filterchain>
    </loadresource>
    
    <target name="build" depends="retrieve-dependencies, prepare-parameters">
        <echo message="Generating ConformanceLab properties files"/>
        <!-- Switched to <java> because the <xslt> ant task doesn't support (an equivalent of) the -it flag -->
        <java classname="net.sf.saxon.Transform" classpath="${Saxon-HE.jar}" logError="true">
            <classpath location="${Saxon-HE.jar}"/>
            <arg value="-it:generatePropertiesFiles" />
            <arg value="-xsl:${xslt.dir}/generateConformanceLabPropertiesFiles.xsl" />
            <arg value="baseDirUrl=${testset.dir.url}"/>
            <arg value="goal=${goal}"/>
            <arg value="fhirVersion=${fhir.version}"/>
            <arg value="informationStandard=${informationStandard}"/>
            <arg value="usecase=${usecase}"/>
            <arg value="roles=${roles}"/>
            <arg value="roleDescriptions=${role.descriptions}"/>
            <arg value="targetDescriptions=${target.descriptions}"/>
            <arg value="adminOnlyTargets=${targets.adminOnly}"/>
            <arg value="packages=${packages}"/>
            <arg value="packageVersions=${packages.versions}"/>
            <arg value="server=${server}"/>
            <arg value="defaultServers=${servers.default}"/>
        </java>
    </target>
</project>